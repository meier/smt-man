smt-console(1) -- an interactive console (curses application) for examining the fabric 
====

## SYNOPSIS

`smt-console` [OMS SOURCE] [OPTIONS <args>]

## DESCRIPTION

This SMT command uses a text based (curses) user interface to organize and display a fabrics' `OMS` data on several screens.  Simple screen navigation is implemented with function keys as well as other special keys.  This tool operates on `OMS` data, as specified by OMS SOURCE.

Although this is a `curses` application, it can be requested to provide a graphical interface for controlling playback.  Also, the terminal is expected to be at least 80 columns wide, by 60 rows.

## OMS SOURCE

Most SMT commands require one or more snapshots of the data provided by the OpenSM Monitoring Service (**OMS**).  These data snapshots can be provided directly (<Online>) via a connection to the OpenSM Monitoring Service, or in a post-mortem (<Offline>) fashion by using an OMS history file.

###Online
  The OMS runs on the same host as OpenSM (the subnet manager for infiniband).  In order for the command to connect to the service it normally needs to know the port number the service is hosted on, as well as the name of the host itself.  These can be specified with;

  * `-h`, `--host`=[HOST]:
  Specifies the name of the OpenSM host where OMS runs.  HOST is either the fully qualified name of the host node, or can be *localhost*.  If not specified, *localhost* is assumed.

  * `-pn`, `--portn`=[PORT]:
  Specifies the port number for the service.  PORT should normally be the default value of *10011*, unless service has been configured otherwise, or unless some sort of port forwarding mechanism is being used.  If not specified, *10011* is assumed.

###Offline
  Most SMT commands, like this one, can use an OMS history file instead of directly connecting to the service.  The history file (commonly refered to as the *flight recorder* file) is obtained via the *smt-record(1)* command.  The file is specified with;

  * `-rH`, `--readOMSHistory`=[FILE]:
  Specifies the OMS history file to use with this command.  FILE is a normal (absolute or relative) filename.  Additionally, the special characters **%h** and **%t** can be used to specify the users' home or temp directory, respectively.

## OPTIONS
### Generic SMT Options
  * `-?`, `--Help`:
  provides an abbreviated form of help

  * `-lf`, `--logFile`=[FILE]:
  the filename for holding this commands' log messages

  * `-ll`, `--logLevel`=[LEVEL]:
  the verbosity of the logging, where LEVEL is SEVERE, WARNING, INFO, CONFIG, FINE, FINER, or ALL.

  * `-rC`, `--readConfig`=[FILE]:
  reads the specified configuration file.  The configuration file typically holds a users' default setting for things like the logLevel.  Refer to the *smt-config(1)* command.

  * `-v`, `--version`:
  prints the version of the SMT command

### Command Options
  * `-pControl`, `--playControl`:
  use a gui based `play` scroll bar, to `control` the frequency of `OMS` snapshots that get delivered to the `smt-console`.  This option is primarily intended for use with `OMS` history files, in the offline mode of operation.  The play control allows one to stop, play, or fast forward through the collection of snapshots.  The gui has a speed setting (`pX`) and a wrap (`wrap`) checkbox to control how the `Play/Pause` button behaves.  If the `playControl` gui is closed, it also closes the `smt-console`.

  * `-pX`, `--playX`=[RATE_MULTIPLIER]:
  when used in conjunction with an `OMS` history file, controls the playback speed of the collection of snapshots.  This option is only available for `offline` mode, and dictates how much faster than normal (x1) speed the `OMS` snapshots should be delivered to the `smt-console`.  For example, if the normal `OMS` update rate is 180 seconds, and `-pX 10` is specified, then updates would occur every 18 seconds.  And a 60 minute `OMS` history file could be reviewed in 6 minutes.

  * `-uS`, `--update`=[NUM_SECONDS]:
  when used in `online` mode, with a direct connection to an OpenSM Monitoring Service, this option dictates how often the `smt-console` checks the service for new data.  Typically, new data is only available at the same period or frequency as the performance managers sweep rate.  Setting a higher rate here, can reduce the lag time between when the service has new data, and when the `smt-console` client gets that same data.  It cannot, however, force the performance manager to acquire its' data more frequently (see `smt-priv(1)`).

  * `-wrap`, `--wrap`=[t/f]:
  when used in conjunction with an `OMS` history file, controls how the playback behaves when the end of file is reached.  If true, then playback continues at the beginning of the file.  If false, playback stops, however the `smt-console` does not exit.

### Navigation
  This section describes the different ways the various screens can be selected.  Four other `control` keys are also explained here.  By default, the first screen is the table of contents, or menu.  Additionally, there is a small area at the bottom of each screen that contains navigation guidance.

  * `Function Keys`:
  each function key selects a specific screen.  In addition, the function key can be modified by the `Ctrl` or `Shift` keys.  These two modifiers are sometimes indicated with an `^` and `s` character (respectively) preceding the function key.  Only function keys F2 through F9 are used, which means a maximum of 24 screens can be made available in this manner.

  * `Home`:
  brings you to the `Table of Contents` or menu screen.

  * `Arrow Left/Right`:
  changes the screen back one, or forward one, with respect to the current screen.  The screens will wrap around if the beginning or end is reached.

  * `Page Up/Down`:
  the `Page Up` key performs exactly the same as the `Left Arrow` key, and `Page Down` is the same as `Right Arrow`.

  * `Esc`, `End`:
  these two keys perform the exact same function, they exit the console, and restore the terminal screen to its original state.

  * `Alt F11`:
  repaints the current screen.  Occasionally, the screen may get garbled or resized and not get displayed properly.  This key combination will clear and repaint the current screen in an attempt to clean up the mess.

  * `space`:
  horizontally scrolls the abbreviated navigation menu at the bottom of each page.  In addition to the `Home` page where the table of contents is displayed, each page contains a short screen list with associated function key.  There is not enough room to show all 14 screens, so the space key provides a way to scroll through the list.

## SCREENS
There are currently 14 different screens that contain information about the fabric, or about the OpenSM Monitoring Service (`OMS`).  Each screen focuses on a particular topic, like `Port Status` or `Link Errors`.  There is a common header and footer on each screen.  The header contains `host` information, as well as versions, `OMS` uptime, and the currently displayed `OMS` data snapshot time.  The footer contains a short screen list with that associated function key for navigating to that screen.  The various screens are described below.

  * `F2`, `Table of Contents`:
  This is the first or default screen that appears as you first invoke the console.  It is the table of contents, and serves as a directory for the available screens.

  * `F3`, `Subnet Status`:
  This screen duplicates the information and mimics the `status` information provided by the opensm console's `status` command.  It shows the current state of the subnet manager, subnet administrator, and performance manager.  It also shows a variety of configuration items and counters, all for the purpose of understanding the health and state of OpenSM.

  * `F4`, `Performance Manager`:
  This screen shows a summary of the various counters monitored by the performance manager.  The colums are organized by the type of node in the fabric.  The rows are the specific performance counter, starting with errors, followed by traffic counters.  The values in each collum/row indicate the type of node that has a non-zero value.  For example, if the `SW` column and `link_downed` row has a value of `2`, it means that 2 switches in the fabric have non-zero values for that particular counter.  Any non-zero values for the error counters should appear red.  There is an area toward the bottom that contains the `top errors`.  If present, this list the most problematic nodes.  A switch is more likely to show up in this list, because it contains more ports (therefore more chance of error) than a channel adapter.

  * `F5`, `Port Status`:
  The composition and configuration of all the ports in the fabric.  This screen breaks out all of the ports by ownership (SW, CA, or RT), and shows their widths and speed, as well as if they are active or not.

  * `F6`, `Link Stats`:
  This is very similar to `Port Status`.  Only information about the ports that successfully establish a link by negotiating shared attributes (speed, width, etc.) are displayed here.  Links between switches are in column SW and links between a switch and a channel adapter are indicated in the CA column.  If there are any erros or traffic on the links, they are indicated here as well.

  * `F7`, `Node Stats`:
  The total number and type of nodes in the fabric is displayed on this screen.  The intent is count common node types.  The bottom section attempts to see how homogeneous the fabric is, by breaking down the nodes based on a variety of attributes.  The fewer number of lines in this section, the more homogeneous the fabric is.

  * `F8`, `Configuration`:
  This screen shows the major items in the opensm configuration file.  Normally the configuration file is located at `/etc/opensm/opensm.conf` and may not be easily accessable.  This screen displays the non-zero and non-false values in that file.  By scrubbing out all of the comments and default settings this, perhaps, makes the configuration easier to read.

  * `F9`, `OpenSM Monitoring Service`:
  The `smt-console` is just a client application that connects to the `OMS`.  This screen shows information about the service, such as the protocol and authentication mechanism it is using, as well as how many other clients are currently connected, and how fast it updates or refreshes its data.  The information about this clients' (`smt-console`) connection is also displayed here.

  * `^F5`, `Top Port Traffic`:
  The traffic counters in two successive `OMS` snapshots can be used to calculate the ports that had the most traffic flowing through them during the delta time period.  The ports with the most traffic show up in this screen.  Level 0 ports, are ports from channel adapters, and levels increment the further removed in the fabric from channel adapters.

  * `^F6`, `Top Link Traffic`:
  This screen is very similar to the `Top Port Traffic` screen, except this screen is organized by Link.  Since a link is simply an association of two ports, this list should contain the same ports from `^F5`.

  * `^F7`, `Top Node Traffic`:
  Since nodes contain ports that hopefully make up links, this screen should also look familiar to the previous two screens.  It is simply organized by node, to identify nodes with may have more than their share of traffic.  Typically, switch nodes would appear at the top, since they have more ports, and channel adapters would be listed toward the bottom.

  * `sF5`, `Top Port Errors`:
  The error counters in two successive `OMS` snapshots can be used to detect errors in the fabric that are actively occuring.  The ports with the most active errors show up in this screen.  A small, or "clean" fabric may not experience any errors during a snapshot period.  In very large fabrics, however, it is likely that an error will occur at some time, somewhere, between the performance managers sweep interval.  Larger errors appear at the top.

  * `sF6`, `Top Link Errors`:
  This screen is similar to the `Top Port Errors` screen.  A link error is simply an error at either side of the link, so the screen really just organizes and displays the errors differently.  It is often useful to know what is on the other end of a link, when a port is having issues.  The port at the other side may or may not be experiencing errors also.

  * `sF7`, `Top Node Errors`:
  Since nodes contain ports that make up links, this screen should look similar to the previous two error screens.  This screen is organized and sorted by node.  The intent is to determine if errors may be related to a common node, or if its just isolated by link or port.  Switch nodes tend to occupy this list, simply because they have more ports than channel adapters.

## EXAMPLES

  * `smt-console -pn 10013`:
  invoke the console in `online` mode, connecting to the service on localhost port 10013

  * `smt-console -rH bigFabric.his -pControl`:
  using the collection of `OMS` snapshots in the history file (`offline` mode), show the console in the current terminal window.  Also, use a graphical interface for controlling the playback of the snapshots.

  * `smt-console`:
  connect to the default `OMS SOURCE` (normally localhost port 10011), and display the console in the current terminal window.

  * `smt-console -rH badFabric.his -pX 10 -wrap t`:
  using the collection of `OMS` snapshots in the history file (`offline` mode), show the console.  Play back the snapshots at ten times the normal speed, and when the end of the file is reached, wrap around to the beginning and start again.

## AUTHOR

Tim Meier <meier3@llnl.gov>

## COPYRIGHT

Copyright (c) 2016, Lawrence Livermore National Security, LLC.
  Produced at the Lawrence Livermore National Laboratory.
  All rights reserved.
  LLNL-CODE-673346

## SEE ALSO

SMT(7), OMS(7), OsmJniPi(8), smt(1), smt-record(1), smt-server(1), smt-gui(1), osmConsole(7), smt-help(1)

[opensm-smt](https://github.com/meier/opensm-smt) on GitHub

